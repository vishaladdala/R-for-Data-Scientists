# We will first work with Titanic dataset included in R
data("Titanic")
summary("Titanic")
head(Titanic)
Titanic_df=as.data.frame(Titanic)
summary(Titanic_df)
head(Titanic_df)

# Since this dataset has categorical predictors, the
# dataset simply is a count of the various combinations
dim(Titanic_df)

# We need to convert to a data frame that NB can handle
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)

# This will repeat each combination equal to the frequency
# of each combination
# Create the dataset by row repetition created
Titanic_dataset=Titanic_df[repeating_sequence,]
dim(Titanic_dataset)

# We no longer need the frequency, drop the feature
Titanic_dataset$Freq=NULL

# Fitting the Naive Bayes model - attach 'e1071' package
Naive_Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)

# What does the model say? Print the model summary
Naive_Bayes_Model

# We will do a simple CV to test the accuracy ...
# Copy this script to the Source window, we will reuse it
train = sample(1:2201, 1500)
trainData = Titanic_dataset[train,]
testData = Titanic_dataset[-train,]
Naive_Bayes_Model=naiveBayes(Survived ~., data=trainData)

# Prediction on the dataset
NB_Predictions=predict(Naive_Bayes_Model,testData)

# Confusion matrix to check accuracy
table(NB_Predictions,testData$Survived)
mean(NB_Predictions == testData$Survived)

# Next we load in the gold target dataset
View(gold_target)
summary(gold_target)
?naiveBayes

# It looks like NB automatically does Gaussian NB
# for numerical predictors
myData = gold_target
myData$Gold = as.factor(myData$Gold)
train = sample(1:64, 50)
trainData = myData[train,]
testData = myData[-train,]
Naive_Bayes_Model=naiveBayes(Gold ~., data=trainData)
NB_Predictions=predict(Naive_Bayes_Model,testData)
table(NB_Predictions,testData$Gold)

# Next let's look at Blood Donors ...
View(bloodDonorData)
summary(bloodDonorData)
myData = bloodDonorData
myData$Donate = as.factor(myData$Donate)
train = sample(1:748, 650)
trainData = myData[train,]
testData = myData[-train,]
Naive_Bayes_Model=naiveBayes(Donate ~., data=trainData)
NB_Predictions=predict(Naive_Bayes_Model,testData)
table(NB_Predictions,testData$Donate)
mean(NB_Predictions == testData$Donate)

# Finally we look at Banknote Authentication
View(data_banknote_authentication)
summary(data_banknote_authentication)
myData = data_banknote_authentication
myData$V5 = as.factor(myData$V5)
train = sample(1:1372, 1000)
trainData = myData[train,]
testData = myData[-train,]
Naive_Bayes_Model=naiveBayes(V5 ~., data=trainData)
NB_Predictions=predict(Naive_Bayes_Model,testData)
table(NB_Predictions,testData$V5)
mean(NB_Predictions == testData$V5)
