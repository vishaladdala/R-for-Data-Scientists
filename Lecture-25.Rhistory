# We will do simple example to see how the functions in 
# recommenderlab work

# Attach the "recommenderlab" package
# Then load in the dataset 'ExampleData'
class(ExampleData)

# We need the ratings matrix only, and we will assume that the 
# users are uniquely mapped to one row each.
ExampleData=ExampleData[,-1]

# We need this to be a matrix
ED = as.matrix(ExampleData)

# Now we recast the matrix as a realRatingMatrix, which is the 
# data type that recommenderlab expects for its API
r = as(ED,"realRatingMatrix")
r
as(r,"matrix")
image(r, main = "Raw Ratings")

# Now we create the model using Recommender - note we use the 
# Jaccard Distance for this model.
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Jaccard",nn=5))
print(rec)
names(getModel(rec))
getModel(rec)$nn

# We can now use the model to predict the missing value for user 
# number 10
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
as(recom, "matrix")

# Based upon the other users ratings and the similarity of user 
# 10 to those users, the model predicts a rating of 3.65 for this 
# item.
recom_2 = predict(rec, r[1:nrow(r)], type="topNList", n=10)
as(recom_2,"matrix")

# Notice that can also do IBCF - now we are essentially working
# with the transpose of the matrix. Given a missing rating for
# an item, we can use a model to predict it based upon similar
# items.
recI=Recommender(r[1:nrow(r)],method="IBCF", param=list(normalize = "Z-score",method="Jaccard",nn=5))
print(recI)
recomI <- predict(recI, r[1:nrow(r)], type="ratings")
recomI
as(recomI, "matrix")

# Which is best? Probably the one with the most information (in 
# this example, number users = number items)

