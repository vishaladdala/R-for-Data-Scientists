# First, attach the "recommenderlab" and "reshape2" packages

# We will load the training data first. Load in the train_v2.csv
# dataset.

# We have a reiew ID (useless to us), a userID, a movieID, and a 
# rating. We can remove the ID column.

train_v2$ID=NULL

# The data set is too large - we will limit ourselves to the
# the first 1000 users and 1000 movies

myData = train_v2[train_v2$user < 1000 & train_v2$movie <1000,]
dim(myData)
summary(myData)

# Given a user, we want to find a movie the user has not 
# seen yet that the user would most likely be interested in. We 
# will do this by finding other users most like our user and 
# finding movies they reviewed that our user has not seen. Then 
# we will recommend the best ones. This is an example of UBCF.
# We need to reformat the data so we have a list of users and 
# the ratings they gave each movie.
# We will use the acast() function to do this.
# Note the 'spread' function in tidyr also 

?acast
myData_rev = acast(myData,user~movie)
class(myData_rev)

# Recommenderlab uses a data format called realRatingMatrix. We
# need to recast our training data into this format.
# We can recast using the as() function

ratings = as(myData_rev,"realRatingMatrix")

# We can now use the Recommender function to build our model.

rec=Recommender(ratings[1:nrow(ratings)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5))
?Recommender
names(getModel(rec))
getModel(rec)$description

# We can now use the model to predict missing ratings

recom <- predict(rec, ratings[1:nrow(ratings)], type="ratings")

# Let's explore our data a little more ...

as(ratings, "matrix")[1:10,1:10]

# First 10 ratings for first 10 users - lots of NA

as(recom, "matrix")[1:10,1:10]

# The NAs are values that already existed in the data - the
# numbers are model predictions
# We now use the model to make predictions for the test entries

# Load in the "test_v2.csv" dataset - use read.csv!


# Again we limit the number of users and movies to shrink the
# dataset

test = test_v2[test_v2$user < 500 & test_v2$movie <500,]
dim(test)

# We will create a rating for each line in the test file.
# We create a list of rows in recom - each row represents
# the predicted ratings of unseen movies for this user - 
# so this is a list of lists.

rec_list<-as(recom,"list")
pred.ratings=NULL # This will be a predicted rating, used later.


# This function loops through all of the users in the 
# test file 'userID' column and calculates a rating
# for the movie identified in the 'movieID' column

for ( u in 1:length(test[,2]))
{

# Read userid and movieid from columns 2 and 3 of test data
userid <- test[u,2]
movieid<-test[u,3]

# Get as list & then convert to data frame all recommendations 
# for user. Note these are movies the user has not seen.
u1<-as.data.frame(rec_list[[userid]])

# Create a (second column) column-id in the data-frame u1 and 
# populate it with row-names. Remember (or check) that rownames 
# of u1 contain movie-ids. We use row.names() function. 
u1$id<-row.names(u1)

# Now access movie ratings in column 1 of u1
x= u1[u1$id==movieid,1]

# If no ratings were found, assign 0. You could also
# assign user-average
if (length(x)==0)
{
pred.ratings[u] <- 0
}
else
{
pred.ratings[u] <-x
}
}

# Finally, we create our matrix of predictions
test_predictions = cbind(test$ID,test$user,test$movie,pred.ratings)
head(test_predictions)
View(test)

# We could also do ...

test_predictions = cbind(test$ID,test$user,test$movie,round(pred.ratings))
head(test_predictions)



